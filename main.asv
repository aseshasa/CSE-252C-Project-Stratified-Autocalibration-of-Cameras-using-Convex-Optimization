clear all;
close all;
w = warning ('off','all');
p0 = [0;0;0;1];
f10 = 1;
f20 = 1;
s0 = 0;
u0 = 0;
v0 = 0;
deltap = zeros(1,50);
for i = 1:50
	disp(i);
	anim = generateToyAnimation(0, 'isProj', true, 'nPoint', 100, 'nFrame', 100);
	sigma = std(std(std(anim.P)));
	anim.W = anim.W + 0*sigma*randn(size(anim.W));
	[HEye, Hqa, p] = affineupgrade(anim, 1e-5);
	[H, K] = metric_upgrade(anim, p);
	p = [p;1];
	deltap(i) = norm(p-p0);
	deltaf(i) = abs(K(1,1)/f10-1) + abs(K(2,2)/f20-1);
	deltauv(i) = abs(K(1,3)-u0) + abs(K(2,3)-v0);
	deltas = abs(K(1,2)-s0);
end
disp(mean(deltap));